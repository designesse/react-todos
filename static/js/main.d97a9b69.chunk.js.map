{"version":3,"sources":["components/TodoForm.js","components/Todos.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","input","setInput","type","value","onChange","e","target","onClick","addTodo","Todos","todos","setTodos","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","className","map","todo","name","newTodos","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOA0BeA,EAxBE,SAACC,GAAW,IAAD,EACAC,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,KAG1B,OACE,gCACE,uBACEC,KAAK,OACLC,MAAOH,EACPI,SAAU,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAOH,UAErC,wBACEI,QAAS,WACO,KAAVP,IACFF,EAAMU,QAAQR,GACdC,EAAS,MAJf,mBCsBSQ,EA/BD,WAAO,IAAD,EACQV,mBAAS,IADjB,mBACXW,EADW,KACJC,EADI,KAGlBC,qBAAU,WACRD,EACEE,aAAaC,QAAQ,SACjBC,KAAKC,MAAMH,aAAaC,QAAQ,UAChC,MAEL,IAEHF,qBAAU,WACRC,aAAaI,QAAQ,QAASF,KAAKG,UAAUR,MAC5C,CAACA,IAOJ,OACE,sBAAKS,UAAU,OAAf,UACE,6BACGT,GAASA,EAAMU,KAAI,SAACC,GAAD,OAAU,6BAAqBA,EAAKC,MAAjBD,EAAKC,WAE9C,cAAC,EAAD,CAAUd,QAVE,SAACR,GACf,IAAMuB,EAAQ,sBAAOb,GAAP,CAAc,CAAEY,KAAMtB,KACpCW,EAASY,MASP,wBAAQhB,QAAS,kBAAMI,EAAS,KAAhC,kC,MClBSa,MARf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,OCMSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d97a9b69.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst TodoForm = (props) => {\n  const [input, setInput] = useState(\"\");\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n      />\n      <button\n        onClick={() => {\n          if (input !== \"\") {\n            props.addTodo(input);\n            setInput(\"\");\n          }\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default TodoForm;\n","import { useState, useEffect } from \"react\";\nimport TodoForm from \"./TodoForm\";\n\nconst Todos = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    setTodos(\n      localStorage.getItem(\"todos\")\n        ? JSON.parse(localStorage.getItem(\"todos\"))\n        : []\n    );\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = (input) => {\n    const newTodos = [...todos, { name: input }];\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"Todo\">\n      <ul>\n        {todos && todos.map((todo) => <li key={todo.name}>{todo.name}</li>)}\n      </ul>\n      <TodoForm addTodo={addTodo} />\n      <button onClick={() => setTodos([])}>Delete all todos</button>\n    </div>\n  );\n};\n\nexport default Todos;\n","import Todos from \"./components/Todos\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todos />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}